for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
test_pred_vwi<-arima_v(train,test,batch=4,freq=52,wxregs_train=wxregs_train,wxregs_test=wxregs_test,dec=TRUE,box_cox = TRUE) # horizontal predictions for this day
save(data=test_pred_hwi,path=paste(exp_dir,'dec,bc,wreg,arima_v_',i,'.csv',sep='')) # write results
}
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
test_pred_vwi<-arima_v(train,test,batch=4,freq=52,wxregs_train=wxregs_train,wxregs_test=wxregs_test,dec=TRUE,box_cox = TRUE) # horizontal predictions for this day
save(data=test_pred_vwi,path=paste(exp_dir,'dec,bc,wreg,arima_v_',i,'.csv',sep='')) # write results
}
train<-load(paste(data_dir,'train.csv', sep='')) # load train set
test<-load(paste(data_dir,'test.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train.csv','hum_train.csv','pressurem_train.csv'),function(x) load(paste(data_dir,x,sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test.csv','hum_test.csv','pressurem_test.csv'),function(x) load(paste(data_dir,x,sep=''))) # load weather covariates for test set
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
test_pred_vwi<-arima_v(train,test,batch=4,freq=52,wxregs_train=wxregs_train,wxregs_test=wxregs_test,dec=TRUE,box_cox = TRUE) # horizontal predictions for this day
save(data=test_pred_vwi,path=paste(exp_dir,'dec,bc,wreg,arima_v_',i,'.csv',sep='')) # write results
}
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
i=0
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
batch=4
freq=52
dec=TRUE
box_cox = TRUE
h=1
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
is.null(f_K)
fxregs_train<-NULL
fxregs_test<-NULL
is.null(wxregs_train)|is.null(wxregs_test)
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
View(wxregs_train)
xregs_train<-cbind(fxregs_train,wxregs_train) # combine fourier & weather into one matrix for train set
xregs_test<-cbind(fxregs_test,wxregs_test) # combine fourier & weather into one matrix for test set
xregs=NULL # default covariates
xregs_pred=NULL # default covariates for predictions
i
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
!is.null(xregs_train)&!is.null(xregs_test)
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-xregs_test[i+seq_len(hor),] # add covariates for predictions
View(xregs_pred)
View(xregs_test)
i%%(batch*hor)==0
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='guerrero') else NULL # estimate lambda for Box-Cox transformation
bc_lambda
dec
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
cat(i%/%(batch*hor),'\n') # print number of retrainings and the type of model
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,xreg=xregs_pred,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
hor
hor=1
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
!is.null(xregs_train)&!is.null(xregs_test)
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-xregs_test[i+seq_len(hor),] # add covariates for predictions
i%%(batch*hor)==0
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='guerrero') else NULL # estimate lambda for Box-Cox transformation
bc_lambda
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
train_ts
2496/48
seq(0,length(test)-hor,hor)
rm(list = ls())
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
train<-load(paste(data_dir,'train.csv', sep='')) # load train set
test<-load(paste(data_dir,'test.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train.csv','hum_train.csv','pressurem_train.csv'),function(x) load(paste(data_dir,x,sep=''))) # load weather covariates for train set
library(forecast)
source('dataprep.R')
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
train<-load(paste(data_dir,'train.csv', sep='')) # load train set
test<-load(paste(data_dir,'test.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train.csv','hum_train.csv','pressurem_train.csv'),function(x) load(paste(data_dir,x,sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test.csv','hum_test.csv','pressurem_test.csv'),function(x) load(paste(data_dir,x,sep=''))) # load weather covariates for test set
i=0
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
batch=4
freq=52
dec=TRUE
box_cox = TRUE
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
names(train)
col='0000'
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
is.null(wxregs_train)|is.null(wxregs_test)
wxregs_train_day<-lapply(wxregs_train,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_test_day<-lapply(wxregs_test,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
hor=1
f_K=NULL
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
is.null(f_K)
fxregs_train<-NULL
fxregs_test<-NULL
is.null(wxregs_train)|is.null(wxregs_test)
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
View(wxregs_test)
i
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
wxregs_train<-lapply(list('tempm_train_','hum_train_','pressurem_train_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for train set
wxregs_test<-lapply(list('tempm_test_','hum_test_','pressurem_test_'),function(x) load(paste(data_dir,x,i,'.csv',sep=''))) # load weather covariates for test set
col
is.null(wxregs_train)|is.null(wxregs_test)
lapply(wxregs_train,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_train_day<-lapply(wxregs_train,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_test_day<-lapply(wxregs_test,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_train=wxregs_train_day
wxregs_test=wxregs_test_day
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
if (is.null(f_K)){ # not considering multiple seasonalities
fxregs_train<-NULL
fxregs_test<-NULL
}
else { # considering multiple seasonalities
fxregs_train<-fourier(msts(train,seasonal.periods=freqs),K=f_K)
fxregs_test<-fourier(msts(test,seasonal.periods=freqs),K=f_K)
}
is.null(f_K)
fxregs_train<-NULL
fxregs_test<-NULL
is.null(wxregs_train)|is.null(wxregs_test)
do.call(cbind,lapply(wxregs_train,function(x) c(t(x))))
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
do.call(cbind,lapply(wxregs_test,function(x) c(t(x))))
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
cbind(fxregs_train,wxregs_train)
xregs_train<-cbind(fxregs_train,wxregs_train) # combine fourier & weather into one matrix for train set
cbind(fxregs_test,wxregs_test)
xregs_test<-cbind(fxregs_test,wxregs_test) # combine fourier & weather into one matrix for test set
xregs=NULL # default covariates
xregs_pred=NULL # default covariates for predictions
i=0
seq(0,length(test)-hor,hor)
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
!is.null(xregs_train)&!is.null(xregs_test)
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-xregs_test[i+seq_len(hor),] # add covariates for predictions
View(wxregs_test)
i%%(batch*hor)==0
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='guerrero') else NULL # estimate lambda for Box-Cox transformation
dec
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
train_ts
2496
train=train_day
test=test_day
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
train<-load(paste(data_dir,'train.csv', sep='')) # load train set
test<-load(paste(data_dir,'test.csv', sep='')) # load test set
# vertical predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vwi<-arima_v(train,test,batch=4,freq=52,dec=TRUE,box_cox = TRUE) # vertical predictions for this day
save(data=test_pred_vwi,path=paste(exp_dir,'dec,bc,arima_v_',i,'.csv',sep='')) # write results
}
arima<-function(train,test,hor=1,batch=7,freq=48,f_K=NULL,wxregs_train=NULL,wxregs_test=NULL,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
if (is.null(f_K)){ # not considering multiple seasonalities
fxregs_train<-NULL
fxregs_test<-NULL
}
else { # considering multiple seasonalities
fxregs_train<-fourier(msts(train,seasonal.periods=freqs),K=f_K)
fxregs_test<-fourier(msts(test,seasonal.periods=freqs),K=f_K)
}
if (is.null(wxregs_train)|is.null(wxregs_test)) # not considering weather regressors
{
wxregs_train<-NULL
wxregs_test<-NULL
}
else{ # considering weather regressors
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
}
xregs_train<-cbind(fxregs_train,wxregs_train) # combine fourier & weather into one matrix for train set
xregs_test<-cbind(fxregs_test,wxregs_test) # combine fourier & weather into one matrix for test set
xregs=NULL # default covariates
xregs_pred=NULL # default covariates for predictions
for (i in seq(0,length(test)-hor,hor)){ # for each window of observations in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (!is.null(xregs_train)&!is.null(xregs_test)){ # if considering external regressors
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-xregs_test[i+seq_len(hor),] # add covariates for predictions
}
if (i%%(batch*hor)==0){ # if its time to retrain
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='guerrero') else NULL # estimate lambda for Box-Cox transformation
if (dec){ # if decomposition is to be applied
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
}
else { # no decomposition
model<-auto.arima(train_ts,xreg=xregs,lambda=bc_lambda,biasadj = FALSE,trace = TRUE) # find best model on the current train set
}
cat(i%/%(batch*hor),'\n') # print number of retrainings and the type of model
}
else{ # it is not the time to retrain
if (dec){
model<-stlm(train_ts,model=model$model,modelfunction=function(x, ...) {Arima(x, xreg=xregs, ...)},s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE) # do not train, use current model with new observations
}
else
{
model<-Arima(train_ts,model=model,xreg=xregs,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,xreg=xregs_pred,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
}
return(test_pred)
}
arima_h<-function(train,test,batch=7,freq=48,f_K=NULL,wxregs_train=NULL,wxregs_test=NULL,box_cox=FALSE,dec=FALSE){
return(arima(train,test,hor=48,batch=batch,freq=freq,f_K=f_K,wxregs_train=wxregs_train,wxregs_test=wxregs_test,box_cox = box_cox,dec = dec))
}
arima_v<-function(train,test,batch=7,freq=7,f_K=NULL,wxregs_train=NULL,wxregs_test=NULL,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
if (is.null(wxregs_train)|is.null(wxregs_test))
{
wxregs_train_day<-NULL
wxregs_test_day<-NULL
}
else
{
wxregs_train_day<-lapply(wxregs_train,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_test_day<-lapply(wxregs_test,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
}
test_pred[[col]]<-arima(train_day,test_day,hor=1,batch=batch,freq=freq,f_K=f_K,wxregs_train=wxregs_train_day,wxregs_test=wxregs_test_day)[[col]] # predictions
}
return(test_pred)
}
# vertical predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vwi<-arima_v(train,test,batch=4,freq=52,dec=TRUE,box_cox = TRUE) # vertical predictions for this day
save(data=test_pred_vwi,path=paste(exp_dir,'dec,bc,arima_v_',i,'.csv',sep='')) # write results
}
arima<-function(train,test,hor=1,batch=7,freq=48,f_K=NULL,wxregs_train=NULL,wxregs_test=NULL,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
if (is.null(f_K)){ # not considering multiple seasonalities
fxregs_train<-NULL
fxregs_test<-NULL
}
else { # considering multiple seasonalities
fxregs_train<-fourier(msts(train,seasonal.periods=freqs),K=f_K)
fxregs_test<-fourier(msts(test,seasonal.periods=freqs),K=f_K)
}
if (is.null(wxregs_train)|is.null(wxregs_test)) # not considering weather regressors
{
wxregs_train<-NULL
wxregs_test<-NULL
}
else{ # considering weather regressors
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
}
xregs_train<-cbind(fxregs_train,wxregs_train) # combine fourier & weather into one matrix for train set
xregs_test<-cbind(fxregs_test,wxregs_test) # combine fourier & weather into one matrix for test set
xregs=NULL # default covariates
xregs_pred=NULL # default covariates for predictions
for (i in seq(0,length(test)-hor,hor)){ # for each window of observations in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (!is.null(xregs_train)&!is.null(xregs_test)){ # if considering external regressors
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-xregs_test[i+seq_len(hor),] # add covariates for predictions
}
if (i%%(batch*hor)==0){ # if its time to retrain
model<-NULL
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='guerrero') else NULL # estimate lambda for Box-Cox transformation
if (dec){ # if decomposition is to be applied
model<-stlm(train_ts,method='arima',xreg=xregs,s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
}
else { # no decomposition
model<-auto.arima(train_ts,xreg=xregs,lambda=bc_lambda,biasadj = FALSE,trace = TRUE) # find best model on the current train set
}
cat(i%/%(batch*hor),'\n') # print number of retrainings and the type of model
}
else{ # it is not the time to retrain
if (dec){
model<-stlm(train_ts,model=model$model,modelfunction=function(x, ...) {Arima(x, xreg=xregs, ...)},s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE) # do not train, use current model with new observations
}
else
{
model<-Arima(train_ts,model=model,xreg=xregs,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,xreg=xregs_pred,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
}
return(test_pred)
}
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
train<-load(paste(data_dir,'train.csv', sep='')) # load train set
test<-load(paste(data_dir,'test.csv', sep='')) # load test set
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/results/' # directory for the results of experiments
train<-load(paste(data_dir,'train_full.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_full.csv', sep='')) # load test set
?expand.grid
?unlist
?expand.grid
expand.grid(c(5,10,15),c(10,50,100))
g=expand.grid(c(5,10,15),c(10,50,100))
g[1]
g[1,]
g[2,]
unlist(g[2,])
seq(4)
seq(4)[1,]
ords=params<-expand.grid(seq(3)) # all combinations of fourier orders to try
ords
ords[1,]
unlist(ords[1,])
K_v<-rep(0,7)
K_v<-rep(NULL,7)
K_v
0
K_v=NULL
K_v<=cbind(K_v,1)
K_v<=cbind(K_v,2)
K_v<-cbind(K_v,2)
K_v
K_v<-cbind(K_v,3)
K_v
K_v=NULL
K_v<-c(K_v,3)
K_v<-c(K_v,4)
K_v
ords<-params<-expand.grid(seq(3)) # all combinations of fourier orders to try
K_v<-NULL
f_ords<-function(train,freq=48,freqs,ords){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
if (fit$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-param # save these orders
aicc_best<-fit$aicc # save new best aicc value
}
}
return(ord_best)
}
K_v <- sapply(names(train),function(x) NULL)
K_v
K_v[['0000']]
ords<-params<-expand.grid(seq(3)) # all combinations of fourier orders to try
K_v <- sapply(names(train),function(x) NULL) # initialize empty list for orders
f_ords<-function(train,freq=48,freqs,ords){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
if (fit$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-param # save these orders
aicc_best<-fit$aicc # save new best aicc value
}
}
return(ord_best)
}
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
train<-load(paste(data_dir,'train_full.csv', sep='')) # load train set
ords<-params<-expand.grid(seq(3)) # all combinations of fourier orders to try
K_v <- sapply(names(train),function(x) NULL) # initialize empty list for orders
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
K_v[[col]]<-f_ords(train_day,freq=365.25,freqs=c(7),ords=ords) # find best fourier coefficients
}
f_ords<-function(train,freq=48,freqs,ords){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
if (fit$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-ord # save these orders
aicc_best<-fit$aicc # save new best aicc value
}
}
return(ord_best)
}
ords<-params<-expand.grid(seq(3)) # all combinations of fourier orders to try
K_v <- sapply(names(train),function(x) NULL) # initialize empty list for orders
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
K_v[[col]]<-f_ords(train_day,freq=365.25,freqs=c(7),ords=ords) # find best fourier coefficients
}
K_v
K_v
seq(from=5,to=20,by=5)
24*7
ords=params<-expand.grid(seq(from=50,to=150,by=50),seq(from=5,to=20,by=5)) # all combinations of fourier orders to try
ords
K_h<-f_ords(train,freq=365.25*48,freqs=c(48,7*48),ords=ords) # find best fourier coefficients
library(forecast)
source('dataprep.R')
f_ords<-function(train,freq=48,freqs,ords){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
if (fit$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-ord # save these orders
aicc_best<-fit$aicc # save new best aicc value
}
}
return(ord_best)
}
ords=params<-expand.grid(seq(from=50,to=150,by=50),seq(from=5,to=20,by=5)) # all combinations of fourier orders to try
K_h<-f_ords(train,freq=365.25*48,freqs=c(48,7*48),ords=ords) # find best fourier coefficients
ords
7*48
/2
7*48/2
ords=params<-expand.grid(seq(from=5,to=20,by=5),seq(from=50,to=150,by=50)) # all combinations of fourier orders to try
K_h<-f_ords(train,freq=365.25*48,freqs=c(48,7*48),ords=ords) # find best fourier coefficients
f_ords<-function(train,freq=48,freqs,ords){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
if (fit$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-ord # save these orders
aicc_best<-fit$aicc # save new best aicc value
}
}
return(ord_best)
}
train
unlist(ords[1,])
unlist(ords[2,])
K_h<-f_ords(train,freq=365.25*48,freqs=c(48,7*48),ords=ords) # find best fourier coefficients
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/nocb/arima/data/' # directory containing data
train<-load(paste(data_dir,'train_full.csv', sep='')) # load train set
ords=params<-expand.grid(seq(from=5,to=20,by=5),seq(from=50,to=150,by=50)) # all combinations of fourier orders to try
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
i=1
ords
ord<-unlist(ords[i,]) # combination of orders
ord
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
freqs=c(48,7*48)
xreg_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
xreg_train
fit=auto.arima(ts(train,frequency = freq),xreg=xreg_train,seasonal=FALSE,trace=TRUE) # find best arima model
