save(data=test_pred_vw,path=paste(exp_dir,'ha,bc,ets_',i,'.csv',sep='')) # write results
}
# DECOMPOSITION
# horizontal prediction
test_pred_h<-ets_h(train,test,batch=28,freq=48,dec=TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'dec,ets.csv',sep='')) # write results
# vertical predictions
test_pred_v<-ets_v(train,test,batch=28,freq=7,dec=TRUE) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,dec,ets.csv',sep='')) # write results
# horizontal predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-ets_h(train,test,batch=4,freq=48,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'dec,ets_',i,'.csv',sep='')) # write results
}
# vertical predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-ets_v(train,test,batch=4,freq=52,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,dec,ets_',i,'.csv',sep='')) # write results
}
# DECOPMPOSITION + BOX COX
# horizontal prediction
test_pred_h<-ets_h(train,test,batch=28,freq=48,box_cox = TRUE,dec=TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'dec,bc,ets.csv',sep='')) # write results
# vertical predictions
test_pred_v<-ets_v(train,test,batch=28,freq=7,box_cox = TRUE,dec=TRUE) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,dec,bc,ets.csv',sep='')) # write results
# horizontal predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-ets_h(train,test,batch=4,freq=48,box_cox = TRUE,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'dec,bc,ets_',i,'.csv',sep='')) # write results
}
# vertical predictions for each day separately
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-ets_v(train,test,batch=4,freq=52,box_cox = TRUE,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,dec,bc,ets_',i,'.csv',sep='')) # write results
}
library('forecast')
source('dataprep.R')
es<-function(train,test,hor=48,batch=7,freq=48,box_cox=FALSE, dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
for (i in seq(0,length(test)-hor,hor)){ # for each sample in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (i%%(batch*hor)==0){ # # if its time to retrain
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='loglik') else NULL # estimate lambda for Box-Cox transformation
if (dec){
model<-stlm(train_ts,method='ets',allow.multiplicative.trend = TRUE,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE)
cat(i%/%(batch*hor),model$model$components,'\n') # print number of retrainings and the type of model
}
else{
model<-ets(train_ts,lambda=bc_lambda,biasadj=FALSE)
cat(i%/%(batch*hor),model$components,'\n') # print number of retrainings and the type of model
}
}
else{ # it is not the time to retrain
if (dec){
model<-stlm(train_ts,model=model,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
else{
model<-ets(train_ts,model=model,lambda=bc_lambda,biasadj=FALSE)
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
}
return(test_pred)
}
es_h<-function(train,test,batch=7,freq=48,box_cox=FALSE,dec=FALSE){
return(es_w(train,test,hor=48,batch=batch,freq=freq,box_cox=box_cox,dec=dec))
}
es_v<-function(train,test,batch=7,freq=7,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
test_pred[[col]]<-es_w(train_day,test_day,hor=1,batch=batch,freq=freq,box_cox=box_cox,dec=dec)[[col]] # predictions
}
return(test_pred)
}
data_dir<-'C:/Users/SABA/Google Drive/mtsg/data/experiments/data/' # directory containing data
exp_dir<-'C:/Users/SABA/Google Drive/mtsg/data/experiments/es_week/' # directory for the results of experiments
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_h<-es_h(train,test,batch=7,freq=48) # predict values
save(data=test_pred_h,path=paste(exp_dir,'es.csv',sep='')) # write results
# no adjustment
es_h<-function(train,test,batch=7,freq=48,box_cox=FALSE,dec=FALSE){
return(es(train,test,hor=48,batch=batch,freq=freq,box_cox=box_cox,dec=dec))
}
# hour adjustment
es_v<-function(train,test,batch=7,freq=7,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
test_pred[[col]]<-es(train_day,test_day,hor=1,batch=batch,freq=freq,box_cox=box_cox,dec=dec)[[col]] # predictions
}
return(test_pred)
}
test_pred_h<-es_h(train,test,batch=7,freq=48) # predict values
save(data=test_pred_h,path=paste(exp_dir,'es.csv',sep='')) # write results
warnings()
test_pred_v<-es_v(train,test,batch=7,freq=7) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,es.csv',sep='')) # write results
# week adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-es_h(train,test,batch=1,freq=48) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'es_',i,'.csv',sep='')) # write results
}
# week + hour adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-es_v(train,test,batch=1,freq=52) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,es_',i,'.csv',sep='')) # write results
}
# BOX_COX TRANSFORMATION
# no adjustment
test_pred_h<-es_h(train,test,batch=7,freq=48,box_cox = TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'bc,es.csv',sep='')) # write results
# hour adjustment
test_pred_v<-es_v(train,test,batch=7,freq=7,box_cox = TRUE) # predict values
test_pred_h<-es_h(train,test,batch=7,freq=48,box_cox = TRUE) # predict values
# BOX_COX TRANSFORMATION
# no adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_h<-es_h(train,test,batch=7,freq=48,box_cox = TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'bc,es.csv',sep='')) # write results
# hour adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=7,freq=7,box_cox = TRUE) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,bc,es.csv',sep='')) # write results
# week adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-es_h(train,test,batch=1,freq=48,box_cox = TRUE) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'bc,es_',i,'.csv',sep='')) # write results
}
# week + hour adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-es_v(train,test,batch=1,freq=52,box_cox = TRUE) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,bc,es_',i,'.csv',sep='')) # write results
}
# DE-SEASONALISATION
# no adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_h<-es_h(train,test,batch=7,freq=48,dec=TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'dec,es.csv',sep='')) # write results
# hour adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=7,freq=7,dec=TRUE) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,dec,es.csv',sep='')) # write results
# week adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-es_h(train,test,batch=1,freq=48,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'dec,es_',i,'.csv',sep='')) # write results
}
# week + hour adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-es_v(train,test,batch=1,freq=52,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,dec,es_',i,'.csv',sep='')) # write results
}
# DE-SEASONALISATION + BOX COX
# no adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_h<-es_h(train,test,batch=7,freq=48,box_cox = TRUE,dec=TRUE) # predict values
save(data=test_pred_h,path=paste(exp_dir,'dec,bc,es.csv',sep='')) # write results
# hour adjustment
train<-load(path=paste(data_dir,'train.csv', sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,'test.csv', sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=7,freq=7,box_cox = TRUE,dec=TRUE) # predict values
save(data=test_pred_v,path=paste(exp_dir,'ha,dec,bc,es.csv',sep='')) # write results
# week adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_hw<-es_h(train,test,batch=1,freq=48,box_cox = TRUE,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_hw,path=paste(exp_dir,'dec,bc,es_',i,'.csv',sep='')) # write results
}
# week + hour adjustment
for (i in 0:6){ # for each day
train<-load(paste(data_dir,'train_',i,'.csv', sep='')) # load train set
test<-load(paste(data_dir,'test_',i,'.csv', sep='')) # load test set
test_pred_vw<-es_v(train,test,batch=1,freq=52,box_cox = TRUE,dec=TRUE) # horizontal predictions for this day
save(data=test_pred_vw,path=paste(exp_dir,'ha,dec,bc,es_',i,'.csv',sep='')) # write results
}
library('forecast')
source('dataprep.R')
es<-function(train,test,hor=48,batch=7,freq=48,box_cox=FALSE, dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
for (i in seq(0,length(test)-hor,hor)){ # for each sample in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (i%%(batch*hor)==0){ # # if its time to retrain
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='loglik') else NULL # estimate lambda for Box-Cox transformation
if (dec){
model<-stlm(train_ts,method='ets',allow.multiplicative.trend = TRUE,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE)
cat(i%/%(batch*hor),model$model$components,'\n') # print number of retrainings and the type of model
}
else{
model<-ets(train_ts,lambda=bc_lambda,biasadj=FALSE)
cat(i%/%(batch*hor),model$components,'\n') # print number of retrainings and the type of model
}
}
else{ # it is not the time to retrain
if (dec){
model<-stlm(train_ts,model=model,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
else{
model<-ets(train_ts,model=model,lambda=bc_lambda,biasadj=FALSE)
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
}
return(test_pred)
}
# no adjustment
es_h<-function(train,test,batch=7,freq=48,box_cox=FALSE,dec=FALSE){
return(es(train,test,hor=48,batch=batch,freq=freq,box_cox=box_cox,dec=dec))
}
# hour adjustment
es_v<-function(train,test,batch=7,freq=7,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
test_pred[[col]]<-es(train_day,test_day,hor=1,batch=batch,freq=freq,box_cox=box_cox,dec=dec)[[col]] # predictions
}
return(test_pred)
}
library('forecast')
source('dataprep.R')
# cross-validation for ES models
es<-function(train,test,hor=48,batch=7,freq=48,box_cox=FALSE, dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
for (i in seq(0,length(test)-hor,hor)){ # for each sample in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (i%%(batch*hor)==0){ # # if its time to retrain
bc_lambda<-if (box_cox) BoxCox.lambda(train,method='loglik') else NULL # estimate lambda for Box-Cox transformation
if (dec){
model<-stlm(train_ts,method='ets',allow.multiplicative.trend = TRUE,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE) # de-seasonalise and estimate ES model
cat(i%/%(batch*hor),model$model$components,'\n') # print number of retrainings and the type of model
}
else{
model<-ets(train_ts,lambda=bc_lambda,biasadj=FALSE) # estimate ES model
cat(i%/%(batch*hor),model$components,'\n') # print number of retrainings and the type of model
}
}
else{ # it is not the time to retrain
if (dec){
model<-stlm(train_ts,model=model,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations + de-seasonalise
}
else{
model<-ets(train_ts,model=model,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,lambda=bc_lambda,biasadj=FALSE)$mean # forecast new values
}
return(test_pred)
}
# no adjustment
es_h<-function(train,test,batch=7,freq=48,box_cox=FALSE,dec=FALSE){
return(es(train,test,hor=48,batch=batch,freq=freq,box_cox=box_cox,dec=dec))
}
# hour adjustment for ES models
es_v<-function(train,test,batch=7,freq=7,box_cox=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){ # for each half-hour interval
train_day<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_day<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_day)<-c(col) # set column name to match
colnames(test_day)<-c(col) # set column name to match
test_pred[[col]]<-es(train_day,test_day,hor=1,batch=batch,freq=freq,box_cox=box_cox,dec=dec)[[col]] # forecast
}
return(test_pred)
}
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/es/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
total
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=28,freq=7) # predict values
save(data=test_pred_v,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
warnings
warnings()
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/es/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=28,freq=7) # predict values
save(data=test_pred_v,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
data_dir
exp_dir
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_v<-es_v(train,test,batch=28,freq=7) # predict values
save(data=test_pred_v,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/arma/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/arma/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_v<-arma_v(train,test,batch=28,freq=7,dec=TRUE,bc = FALSE) # predict values
save(data=test_pred_v,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
f_ords<-function(train,freq=48,freqs,ords,dec=FALSE,bc=FALSE){
train<-c(t(train)) # flatten train set
aicc_best<-Inf # best aicc statistic
param_best<-NULL # best parameters
bc_lambda<-if (bc) BoxCox.lambda(train,method='loglik') else NULL # estimate lambda for Box-Cox transformation
for (i in 1:nrow(ords)){ # for each combination of orders
ord<-unlist(ords[i,]) # combination of orders
xregs_train<-fourier(msts(train,seasonal.periods=freqs),K=ord) # fourier terms for particular multi-seasonal time series
if (dec) { # if decompose first
model<-stlm(ts(train,frequency = freq),method='arima',xreg=xregs_train,s.window=7,robust=TRUE,trace=TRUE,lambda = bc_lambda)$model  # find best arma model after decomposition
}
else{ # dont decompose
model<-auto.arima(ts(train,frequency = freq),xreg=xregs_train,seasonal=FALSE,trace=TRUE,lambda = bc_lambda) # find best arma model
}
if (model$aicc<aicc_best){ # if there is an improvement in aicc statistic
ord_best<-ord # save these orders
aicc_best<-model$aicc # save new best aicc value
}
}
return(ord_best)
}
# cross-validation for arma models
arma<-function(train,test,hor=1,batch=7,freq=48,freqs=NULL,ord=NULL,wxregs_train=NULL,wxregs_test=NULL,bc=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize matrix for predictions
train<-c(t(train)) # flatten train set
test<-c(t(test)) # flatten test set
if (is.null(ord)){ # not considering multiple seasonalities
fxregs_train<-NULL
fxregs_test<-NULL
seasonal<-TRUE
}
else { # considering multiple seasonalities
fxregs<-fourier(msts(c(train,test),seasonal.periods=freqs),K=ord) # fourier coefficients
fxregs_train<-fxregs[1:length(train),] # fourier coefficients for train set
fxregs_test<-fxregs[1:length(test),] # fourier coefficients for test set
seasonal<-FALSE
}
if (is.null(wxregs_train)|is.null(wxregs_test)) # not considering weather regressors
{
wxregs_train<-NULL
wxregs_test<-NULL
}
else{ # considering weather regressors
wxregs_train<-do.call(cbind,lapply(wxregs_train,function(x) c(t(x)))) # flatten and combine weather regressors for train set
wxregs_test<-do.call(cbind,lapply(wxregs_test,function(x) c(t(x)))) # flatten and combine weather regressors for test set
}
xregs_train<-cbind(fxregs_train,wxregs_train) # combine fourier & weather into one matrix for train set
xregs_test<-cbind(fxregs_test,wxregs_test) # combine fourier & weather into one matrix for test set
xregs=NULL # default covariates
xregs_pred=NULL # default covariates for predictions
model<-NULL
for (i in seq(0,length(test)-hor,hor)){ # for each window of observations in test set
train_ts<-ts(c(train,test[seq_len(i)]),frequency=freq) # add new observations from test set to the current train set
if (!is.null(xregs_train)&!is.null(xregs_test)){ # if considering external regressors
xregs<-rbind(xregs_train,xregs_test[seq_len(i),]) # add covariates corresponding to new observations
xregs_pred<-matrix(xregs_test[i+seq_len(hor),],ncol=ncol(xregs_test)) # add covariates for predictions
}
if (i%%(batch*hor)==0){ # if its time to retrain
bc_lambda<-if (bc) BoxCox.lambda(train,method='loglik') else NULL # estimate lambda for Box-Cox transformation
if (dec){ # if decomposition is to be applied
model<-stlm(train_ts,method='arima',xreg=xregs,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj = FALSE,trace=TRUE) # find best model on the current train set
}
else { # no decomposition
model<-auto.arima(train_ts,xreg=xregs,seasonal=seasonal,lambda=bc_lambda,biasadj = FALSE,trace = TRUE) # find best model on the current train set
}
cat('training: ',i%/%(batch*hor),'\n') # print number of retrainings and the type of model
}
else{ # it is not the time to retrain
if (dec){ # if de-seasonalisation
if (!is.null(xregs)) # no external regressiors
{
model<-stlm(train_ts,model=model$model,modelfunction=function(x, ...) {Arima(x, xreg=xregs, ...)},s.window='periodic',robust=TRUE,lambda=bc_lambda,biasadj = FALSE) # do not train, use current model with new observations
}
else {
model<-stlm(train_ts,model=model,s.window=7,robust=TRUE,lambda=bc_lambda,biasadj = FALSE) # do not train, use current model with new observations
}
}
else # no deseasonalisation
{
model<-Arima(train_ts,model=model,xreg=xregs,lambda=bc_lambda,biasadj=FALSE) # do not train, use current model with new observations
}
}
test_pred[(i%/%hor)+1,]<-forecast(model,h=hor,xreg=xregs_pred,lambda=bc_lambda,biasadj=FALSE)$mean # predict new values
}
return(test_pred)
}
# no adjustments
arma_h<-function(train,test,batch=7,freq=48,freqs=NULL,ord=NULL,wxregs_train=NULL,wxregs_test=NULL,bc=FALSE,dec=FALSE){
return(arma(train,test,hor=48,batch=batch,freq=freq,freqs=freqs,ord=ord,wxregs_train=wxregs_train,wxregs_test=wxregs_test,dec = dec,bc = bc))
}
# hour adjustment for ARMA models
arma_v<-function(train,test,batch=7,freq=7,ord=NULL,freqs=NULL,wxregs_train=NULL,wxregs_test=NULL,bc=FALSE,dec=FALSE){
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))),check.names = FALSE) # initialize dataframe for predictions
for (col in names(train)){ # for each half-hour interval
train_col<-as.data.frame(train[[col]],row.names=rownames(train)) # convert dataframe column to dataframe
test_col<-as.data.frame(test[[col]],row.names=rownames(test)) # convert dataframe column to dataframe
colnames(train_col)<-c(col) # set column name to match
colnames(test_col)<-c(col) # set column name to match
if (is.null(wxregs_train)|is.null(wxregs_test)) # no weather regressors
{
wxregs_train_col<-NULL
wxregs_test_col<-NULL
}
else # consider weather regressors
{
wxregs_train_col<-lapply(wxregs_train,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
wxregs_test_col<-lapply(wxregs_test,function(x) as.data.frame(`[[`(x, col))) # extract a particular column from each member of list of covariates
}
test_pred[[col]]<-arma(train_col,test_col,hor=1,batch=batch,freq=freq,freqs=freqs,ord=ord,wxregs_train=wxregs_train_col,wxregs_test=wxregs_test_col,dec=dec,bc=bc)[[col]] # predictions
cat('time: ',col,'\n')
}
return(test_pred)
}
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_v<-arma_v(train,test,batch=28,freq=7,dec=TRUE,bc = FALSE) # predict values
save(data=test_pred_v,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/arma/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
data_dir<-'C:/Users/SABA/tmp/15min/data/sample/' # directory containing data
exp_dir<-'C:/Users/SABA/tmp/15min/results/armax/' # directory for the results of experiments
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
exp_dir<-'C:/Users/SABA/tmp/15min/results/armax/' # directory for the results of experiments
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_vf<-arma_v(train,test,batch=28,freq=365.25,freqs=c(7),ord=3,dec=FALSE,bc = FALSE) # horizontal prediction
save(data=test_pred_vf,path=paste(exp_dir,'armax/','ha,',name,'fregs,armax.csv',sep='')) # write results
}
total=length(dir(path = data_dir, full.names = FALSE, no..=TRUE))
i=0
for (d in dir(path = data_dir, full.names = FALSE, no..=TRUE)){
i=i+1
cat(d,':',i/total*100,'%\n',sep='')
train<-load(path=paste(data_dir,d,'/train.csv',sep=''),idx='date') # load train set
test<-load(path=paste(data_dir,d,'/test.csv',sep=''),idx='date') # load test set
test_pred_vf<-arma_v(train,test,batch=28,freq=365.25,freqs=c(7),ord=3,dec=FALSE,bc = FALSE) # horizontal prediction
save(data=test_pred_vf,path=paste(exp_dir,d,'.csv',sep='')) # write results
}
