train_ts=ts(train[[10]],frequency=1)
test_ts=ts(test[[10]],frequency=1)
test_ts=ts(test[[10]],frequency=1)
train_ts=ts(train[[10]],frequency=1)
train=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_train.csv',header=TRUE,sep=',',dec='.')
train_ts=ts(train[[10]],frequency=1)
train_ts=ts(train,frequency=1)
fit_train_ts=ets(train_ts)
fit_test_ts=ets(test_ts,model=fit_train_ts)
train_ts_pred=fitted(fit_train_ts)
test_ts_pred=fitted(fit_test_ts)
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
train_ts
test_ts
train=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_train.csv',header=TRUE,sep=',',dec='.')
test=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_test.csv',header=TRUE,sep=',',dec='.')
train_ts=ts(train[[10]],frequency=1)
test_ts=ts(test[[10]],frequency=1)
train_ts=ts(train[[10]],frequency=findfrequency(train[[10]]))
test_ts=ts(test[[10]],frequency=findfrequency(test[[10]]))
fit_train_ts=ets(train_ts)
fit_test_ts=ets(test_ts,model=fit_train_ts)
train_ts_pred=fitted(fit_train_ts)
test_ts_pred=fitted(fit_test_ts)
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_ts,test_ts_pred,col=c('black','red'),lty=c(5,1))
train_xts=xts(train[[10]],as.POSIXct(train[["date"]]))
test_xts=xts(test[[10]],order.by=as.POSIXct(test$date))
fit_train_xts=ets(train_xts)
fit_test_xts=ets(test_xts,model=fit_train_xts)
train_xts_pred=fitted(fit_train_xts)
test_xts_pred=fitted(fit_test_xts)
ts.plot(train_xts,train_xts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_xts,test_xts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_ts,test_ts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_xts,test_xts_pred,col=c('black','red'),lty=c(5,1))
train_ts=ts(train[[0]],frequency=findfrequency(train[[0]]))
test_ts=ts(test[[0]],frequency=findfrequency(test[[0]]))
fit_train_ts=ets(train_ts)
train=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_train.csv',header=TRUE,sep=',',dec='.')
test=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_test.csv',header=TRUE,sep=',',dec='.')
train_ts=ts(train[[0]],frequency=findfrequency(train[[0]]))
train_fit
train=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_train.csv',header=TRUE,sep=',',dec='.')
test=read.csv('C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/load_test.csv',header=TRUE,sep=',',dec='.')
train_ts=ts(train[[0]],frequency=findfrequency(train[[0]]))
train_ts=ts(train[[1]],frequency=findfrequency(train[[1]]))
test_ts=ts(test[[1]],frequency=findfrequency(test[[1]]))
fit_train_ts=ets(train_ts)
fit_test_ts=ets(test_ts,model=fit_train_ts)
train_ts_pred=fitted(fit_train_ts)
test_ts_pred=fitted(fit_test_ts)
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_ts,test_ts_pred,col=c('black','red'),lty=c(5,1))
train_ts=ts(train[[2]],frequency=findfrequency(train[[2]]))
test_ts=ts(test[[2]],frequency=findfrequency(test[[2]]))
fit_train_ts=ets(train_ts)
fit_test_ts=ets(test_ts,model=fit_train_ts)
train_ts_pred=fitted(fit_train_ts)
test_ts_pred=fitted(fit_test_ts)
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(test_ts,test_ts_pred,col=c('black','red'),lty=c(5,1))
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
train_ts_pred=fitted(fit_train_ts)
ts.plot(train_ts,train_ts_pred,col=c('black','red'),lty=c(5,1))
fit_test_ts=ets(test_ts,model=fit_train_ts)
test_ts
findfrequency(test_ts)
findfrequency(train_ts)
ts.plot(test)
test
test_ts
library(forecast)
library(fpp)
install.packages("fpp")
library(fpp)
h <- 5
train <- window(hsales,end=1989.99)
test <- window(hsales,start=1990)
n <- length(test) - h + 1
fit <- auto.arima(train)
order <- arimaorder(fit)
fcmat <- matrix(0, nrow=n, ncol=h)
?window
window?
?window
library(forecast)
library(fpp)
h <- 5
train <- window(hsales,end=1989.99)
test <- window(hsales,start=1990)
n <- length(test) - h + 1
fit <- auto.arima(train)
order <- arimaorder(fit)
for(i in 1:n)
{
x <- window(hsales, end=1989.99 + (i-1)/12)
refit <- Arima(x, order=order[1:3], seasonal=order[4:6])
fcmat[i,] <- forecast(refit, h=h)$mean
}
hsales
window(hsales,start=1,end=2)
window(hsales,end=2)
window(hsales,start=1)
window(hsales,start=2)
fit_train$components
fit_train$states
fit_train$components
paste0(fit_train$components)
paste0(c(fit_train$components))
R.Version()
Sys.getenv("R_ARCH")
library(forecast)
rima=function(train,test,hor=1,batch=7,freq=7){
test_pred=matrix(data=NA,nrow=nrow(test),ncol=ncol(test)) # initialize matrix for predictions
pb=txtProgressBar(min = 0, max = nrow(test), style = 3) # initialize progress bar
for (i in 0:nrow(test)){ # for each sample in test set
test_ts=ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
if (i%%batch==0){ # # if its time to retrain
model=auto.arima(test_ts) # find best model on the current train set
}
else{ # it is not the time to retrain
model=Arima(test_ts,model=model) # do not train, use current model with new observations
}
test_pred[i,]=forecast(model,h=hor)$mean # predict new values
setTxtProgressBar(pb, i) # update progress
}
close(pb) # close progress bar
return(data.frame(test_pred))
}
arima_h=function(train,test,batch=7,freq=24){
return(arima(train,test,hor=24,batch=batch,freq=freq))
}
arima_v=function(train,test,batch=7,freq=7){
test_pred=as.data.frame(lapply(test, function(x) rep.int(NA, length(x)))) # template dataframe for predictions
for (col in names(train)){
train_day=as.data.frame(train[[col]]) # convert dataframe column to dataframe
test_day=as.data.frame(test[[col]]) # convert dataframe column to dataframe
colnames(train_day)=c(col) # set column name to match
colnames(test_day)=c(col) # set column name to match
test_pred[[col]]=arima(train_day,test_day,hor=1,batch=batch,freq=freq) # predictions
}
return(test_pred)
}
dir='C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/' # directory containing data
for (i in 0:6){ # for each day
train=read.csv(paste(dir,'train_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
test_pred_hw=arima_h(train,test,batch=4,freq=24) # horizontal predictions for this day
rownames(test_pred_hw)=date_test # set "index"
write.csv(test_pred_hw,file=paste(dir,'arima_rh_',i,'.csv',sep='')) # write results
}
dir
dir='C:/Users/SABA/Google Drive/mtsg/data/' # directory containing data
for (i in 0:6){ # for each day
train=read.csv(paste(dir,'train_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
test_pred_hw=arima_h(train,test,batch=4,freq=24) # horizontal predictions for this day
rownames(test_pred_hw)=date_test # set "index"
write.csv(test_pred_hw,file=paste(dir,'arima_rh_',i,'.csv',sep='')) # write results
}
arima=function(train,test,hor=1,batch=7,freq=7){
test_pred=matrix(data=NA,nrow=nrow(test),ncol=ncol(test)) # initialize matrix for predictions
pb=txtProgressBar(min = 0, max = nrow(test), style = 3) # initialize progress bar
for (i in 0:nrow(test)){ # for each sample in test set
test_ts=ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
if (i%%batch==0){ # # if its time to retrain
model=auto.arima(test_ts) # find best model on the current train set
}
else{ # it is not the time to retrain
model=Arima(test_ts,model=model) # do not train, use current model with new observations
}
test_pred[i,]=forecast(model,h=hor)$mean # predict new values
setTxtProgressBar(pb, i) # update progress
}
close(pb) # close progress bar
return(data.frame(test_pred))
}
arima_h=function(train,test,batch=7,freq=24){
return(arima(train,test,hor=24,batch=batch,freq=freq))
}
arima_v=function(train,test,batch=7,freq=7){
test_pred=as.data.frame(lapply(test, function(x) rep.int(NA, length(x)))) # template dataframe for predictions
for (col in names(train)){
train_day=as.data.frame(train[[col]]) # convert dataframe column to dataframe
test_day=as.data.frame(test[[col]]) # convert dataframe column to dataframe
colnames(train_day)=c(col) # set column name to match
colnames(test_day)=c(col) # set column name to match
test_pred[[col]]=arima(train_day,test_day,hor=1,batch=batch,freq=freq) # predictions
}
return(test_pred)
}
for (i in 0:6){ # for each day
train=read.csv(paste(dir,'train_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
test_pred_hw=arima_h(train,test,batch=4,freq=4) # horizontal predictions for this day
rownames(test_pred_hw)=date_test # set "index"
write.csv(test_pred_hw,file=paste(dir,'arima_rh_',i,'.csv',sep='')) # write results
}
for (i in 0:6){ # for each day
train=read.csv(paste(dir,'train_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
test_pred_vw=arima_v(train,test,batch=4,freq=4) # horizontal predictions for this day
rownames(test_pred_vw)=date_test # set "index"
write.csv(test_pred_vw,file=paste(dir,'arima_rv_',i,'.csv',sep='')) # write results
}
test_pred_h=arima_h(train,test,batch=28,freq=24) # horizontal prediction
rownames(test_pred_h)=date_test # set "index"
write.csv(test_pred_h,file='C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/arima_rh.csv',quote = FALSE) # write predictions
test_pred_v=arima_v(train,test,batch=28,freq=7) # vertical predictions
rownames(test_pred_v)=date_test # set "index"
write.csv(test_pred_v,file='C:/Users/SABA/Google Drive/mtsg/code/load_forecast/data/arima_rv.csv') # write results
library(forecast)
arima=function(train,test,hor=1,batch=7,freq=7){
test_pred=matrix(data=NA,nrow=nrow(test),ncol=ncol(test)) # initialize matrix for predictions
pb=txtProgressBar(min = 0, max = nrow(test), style = 3) # initialize progress bar
for (i in 0:nrow(test)){ # for each sample in test set
test_ts=ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
if (i%%batch==0){ # # if its time to retrain
model=auto.arima(test_ts) # find best model on the current train set
}
else{ # it is not the time to retrain
model=Arima(test_ts,model=model) # do not train, use current model with new observations
}
test_pred[i,]=forecast(model,h=hor)$mean # predict new values
setTxtProgressBar(pb, i) # update progress
}
close(pb) # close progress bar
return(data.frame(test_pred))
}
arima_h=function(train,test,batch=7,freq=24){
return(arima(train,test,hor=24,batch=batch,freq=freq))
}
arima_v=function(train,test,batch=7,freq=7){
test_pred=as.data.frame(lapply(test, function(x) rep.int(NA, length(x)))) # template dataframe for predictions
for (col in names(train)){
train_day=as.data.frame(train[[col]]) # convert dataframe column to dataframe
test_day=as.data.frame(test[[col]]) # convert dataframe column to dataframe
colnames(train_day)=c(col) # set column name to match
colnames(test_day)=c(col) # set column name to match
test_pred[[col]]=arima(train_day,test_day,hor=1,batch=batch,freq=freq) # predictions
}
return(test_pred)
}
dir='C:/Users/SABA/Google Drive/mtsg/data/' # directory containing data
# horizontal predictions for each day separately
for (i in 0:6){ # for each day
train=read.csv(paste(dir,'train_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test_',i,'.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
test_pred_hw=arima_h(train,test,batch=4,freq=24) # horizontal predictions for this day
rownames(test_pred_hw)=date_test # set "index"
write.csv(test_pred_hw,file=paste(dir,'arima_rh_',i,'.csv',sep='')) # write results
}
library(forecast)
set.seed(1)
library(lubridate)
install.packages('lubridate')
index <- ISOdatetime(2010,1,1,0,0,0)+1:8759*60*60
month <- month(index)
?month
index
month <- month(index)
library(lubridate)
month <- month(index)
hour <- hour(index)
usage <- 1000+10*rnorm(length(index))-25*(month-6)^2-(hour-12)^2
usage <- ts(usage,frequency=24)
xreg <- model.matrix(~as.factor(month))[,2:12]
xreg
model.matrix(~as.factor(month))
month
model.matrix(~as.factor(month))
xreg <- model.matrix(~as.factor(month))[,2:12]
xreg
xreg[1]
xreg[1,:]
xreg[1,]
xreg[,1]
xreg[1000:2000,2]
train
date_train
library(lubridate)
month(date_train)
?model.matrix
~as.factor(month(date_train))
as.factor(month(date_train))
i=0
test_ts=ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
freq=24
test_ts=ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
seasonaldummy(test_ts)
date_train
seasonaldummy(date_train)
seasonaldummy(ts(date_train,frequency=12))
seasonaldummy(ts(date_train,frequency=7))
as.factor(month(date_train))
model.matrix(~as.factor(month(date_train)))
model.matrix(~as.factor(month(date_train)))[1:11]
model.matrix(~as.factor(month(date_train)))[,1:11]
as.factor(year(date_train))
date_train
train=read.csv(paste(dir,'train.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
test=read.csv(paste(dir,'test.csv', sep=''),header=TRUE,sep=',',dec='.') # load test set
date_train=train$date # extract date column from train set
date_test=test$date # extract date column from test set
train=train[ , !names(train) %in% c('date')] # drop date column from train set
test=test[ , !names(test) %in% c('date')] # drop date column from test set
dir='C:/Users/SABA/Google Drive/mtsg/data/' # directory containing data
train<-read.csv(paste(dir,'train.csv', sep=''),header=TRUE,sep=',',dec='.') # load train set
date_train<-pop_col(train,col='date') # extract date column from train set
pop_col<-function(data,col){ # removes and returns column from dataframe
poped_col<-data$col # extract column from dataframe
data<<-data[ , !names(data) %in% c(col)] # drop column from dataframe & change the original dataframe
return(poped_col)
}
date_train<-pop_col(train,col='date') # extract date column from train set
pop_col<-function(dataframe,col){ # removes and returns column from dataframe
poped_col<-dataframe$col # extract column from dataframe
dataframe<<-dataframe[ , !names(dataframe) %in% c(col)] # drop column from dataframe & change the original dataframe
return(poped_col)
}
date_train<-pop_col(train,col='date') # extract date column from train set
date_train<-pop_col(train,col='date') # extract date column from train set
date_train<-pop_col(dataframe=train,col='date') # extract date column from train set
View(train)
train
rownames(train)=train$date
train
?read.csv
train<-read.csv(paste(dir,'train.csv', sep=''),header=TRUE,rownames='date',sep=',',dec='.') # load train set
train<-read.csv(paste(dir,'train.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load train set
train
test<-read.csv(paste(dir,'test.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load test set
hor=1
hor=24
batch=7
freq=7
test_pred<-matrix(data=NA,nrow=nrow(test),ncol=ncol(test)) # initialize matrix for predictions
i=0
test_ts<-ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
test_ts
model<-auto.arima(test_ts,xreg=xreg_ts) # find best model on the current train set
xreg_test=NULL
model<-auto.arima(test_ts,xreg=xreg_test) # find best model on the current train set
train
train[1]
ts(train[1],frequency=7)
test_pred
rownames(test_pred)=rownames(test)
test_pred
i
test_pred[i,]<-forecast(model,h=hor,)$mean # predict new values
test_pred
forecast(model,h=hor)$mean
test_pred[i,]<-forecast(model,h=hor)$mean # predict new values
test_pred
test_pred[0,]
test_pred[1,]
test_pred
test_pred[1,]<-forecast(model,h=hor)$mean # predict new values
test_pred
data.frame
?data.frame
train
train<-read.csv(paste(dir,'train.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load train set
test<-read.csv(paste(dir,'test.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load test set
hor=24
i=0
batch=7
freq=24
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test)),row.names=rownames(test)) # initialize matrix for predictions
test_pred
test
?matrix
?col.names
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test))) # initialize matrix for predictions
pb<-txtProgressBar(min = 0, max = nrow(test), style = 3) # initialize progress bar
for (i in 0:nrow(test)){ # for each sample in test set
test_ts<-ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
if (is.null(xreg)){ # not considering external regressors
xreg_ts<-xreg # preserve NULL
}
else{ # considering external regressors
xreg_ts<-ts.union(lapply(xreg,function(x,freq) ts(c(t(x)),frequency=freq),freq=freq)) # format and combine external regressors
}
if (i%%batch==0){ # # if its time to retrain
model<-auto.arima(test_ts,xreg=xreg_test) # find best model on the current train set
}
else{ # it is not the time to retrain
model<-Arima(test_ts,model=model,xreg=xreg_test) # do not train, use current model with new observations
}
test_pred[i+1,]<-forecast(model,h=hor)$mean # predict new values
setTxtProgressBar(pb, i) # update progress
}
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test)))) # initialize matrix for predictions
test_pred
is.data.frame(test_pred)
i=0
test_ts<-ts(c(t(rbind(train,head(test,i)))),frequency=freq) # add a new day from test set to the current train set
model<-auto.arima(test_ts,xreg=xreg_test) # find best model on the current train set
test_pred[i+1,]<-forecast(model,h=hor)$mean # predict new values
test_pred
test_pred[i,]<-forecast(model,h=hor)$mean # predict new values
test_pred
test_pred<-data.frame(matrix(data=NA,nrow=nrow(test),ncol=ncol(test),dimnames=list(rownames(test),colnames(test)))) # initialize matrix for predictions
test_pred[i,]<-forecast(model,h=hor)$mean # predict new values
test_pred
train<-read.csv(paste(dir,'train.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load train set
test<-read.csv(paste(dir,'test.csv', sep=''),header=TRUE,row.names='date',sep=',',dec='.') # load test set
train
train$date
rownames(train)
as.factor(year(rownames(train))
)
rbind(rownames(train),rownames(test))
rownames(train)
rownames(test)
?rbind
cbind(rownames(train),rownames(test))
c(rownames(train),rownames(test))
max.print
getOption(max.print)
getOption('max.print')
setOption('max.print')=1500
option(max.print=1500)
?option
options(max.print=1500)
c(rownames(train),rownames(test))
dummy_year=model.matrix(~as.factor(year(c(rownames(train),rownames(test)))))
dummy_year
year(c(rownames(train),rownames(test)))
as.factor(year(c(rownames(train),rownames(test))))
?factor
?~
dummy_year=model.matrix(~as.factor(year(c(rownames(train),rownames(test)))))
dummy_year[1]
dummy_year[,1]
dummy_year[,2]
dummy_year[,3]
dummy_year[,4]
dummy_year[,5]
dummy_year[,1]
?model.matrix
dummy_year[,6]
dummy_year[,5]
dummy_year[,0]
as.factor(year(c(rownames(train),rownames(test)))
)
dummy_year[,1]
?fourier
?msts
5/2
5//2
5%2
5%/%2
?expand.grid
?combn
combn(5,2)
?expand.grid
?expand.grid(1:5,1:3)
expand.grid(1:5,1:3)
K=list(5,8)
expand.grid(K)
expand.grid(unlist(K)
)
unlist(K)
unlist(K)%/%2
1:unlist(K)%/%2
?apply
?:
lapply(K%/%2
)
lapply(K%/%2,seq,from=1)
K%/%2
K
K=list(5,8)
K%/%2
lapply(K,function(x) seq(from,x%/%2),from=1)
lapply(K,function(x) seq(from=1,x%/%2),from=1)
?se
?seq
lapply(K,function(x) seq(x%/%2))
expand.grid(lapply(K,function(x) seq(x%/%2)))
K=list(5,8,6)
expand.grid(lapply(K,function(x) seq(x%/%2)))
?dlply
?by
expand.grid(lapply(K,function(x) seq(0,x%/%2)))
?fourier
params=expand.grid(lapply(K,function(x) seq(0,x%/%2))) # all combinations of fourier orders
nrow(params
)
